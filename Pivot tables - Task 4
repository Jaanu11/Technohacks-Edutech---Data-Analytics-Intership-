{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "guilty-norfolk",
   "metadata": {
    "papermill": {
     "duration": 0.035092,
     "end_time": "2021-10-10T14:28:16.227311",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.192219",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Building a Pivot Table using Pandas in Python"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "recreational-remainder",
   "metadata": {
    "papermill": {
     "duration": 0.024319,
     "end_time": "2021-10-10T14:28:16.276221",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.251902",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Hello all, in this notebook I will be exploring the Titanic Dataset with pivot tables using Pandas in Python"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "lonely-intake",
   "metadata": {
    "papermill": {
     "duration": 0.024028,
     "end_time": "2021-10-10T14:28:16.325108",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.301080",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Pivot tables are important because they allow anyone to filter and extract significance about the data set they are working with. Pivot tables allow anyone to look at their data in a number of ways and perspectives.<p>Pandas library offers a function called **pivot_table** that summarized a feature’s values in a neat two-dimensional table."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "patent-merchandise",
   "metadata": {
    "papermill": {
     "duration": 0.024762,
     "end_time": "2021-10-10T14:28:16.375109",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.350347",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**pandas.pivot_table(data, values=None, index=None, columns=None, aggfunc=’mean’, fill_value=None, margins=False, dropna=True, margins_name=’All’)** <p>\n",
    "\n",
    "**Parameters:**\n",
    "\n",
    "- **data** : DataFrame<p>\n",
    "- **values** : column to aggregate, optional<p>\n",
    "- **index**: column, Grouper, array, or list of the previous<p>\n",
    "- **columns**: column, Grouper, array, or list of the previous<p>\n",
    "\n",
    "- **aggfunc**: function, list of functions, dict, default numpy.mean (If list of functions passed, the resulting pivot table will have hierarchical columns whose top level are the function names. If dict is passed, the key is column to aggregate and value is function or list of function)\n",
    "    \n",
    "<p>\n",
    "    \n",
    "- **fill_value[scalar, default None]** : Value to replace missing values with<p>\n",
    "- **margins[boolean, default False]** : Add all row / columns (e.g. for subtotal / grand totals)<p>\n",
    "- **dropna[boolean, default True]** : Do not include columns whose entries are all NaN<p>\n",
    "- **margins_name[string, default ‘All’]** : Name of the row / column that will contain the totals when margins is True.<p>\n",
    "\n",
    "- **Returns**: DataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "allied-juice",
   "metadata": {
    "papermill": {
     "duration": 0.024699,
     "end_time": "2021-10-10T14:28:16.424646",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.399947",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Exploring the Titanic Dataset using Pandas in Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ideal-enterprise",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-10T14:28:16.479230Z",
     "iopub.status.busy": "2021-10-10T14:28:16.478000Z",
     "iopub.status.idle": "2021-10-10T14:28:16.496134Z",
     "shell.execute_reply": "2021-10-10T14:28:16.496678Z",
     "shell.execute_reply.started": "2021-10-10T14:13:08.957104Z"
    },
    "papermill": {
     "duration": 0.047573,
     "end_time": "2021-10-10T14:28:16.497004",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.449431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# importing libraries\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.pylab import rcParams\n",
    "rcParams['figure.figsize'] = 12,6\n",
    "plt.style.use('ggplot')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adapted-bosnia",
   "metadata": {
    "papermill": {
     "duration": 0.02598,
     "end_time": "2021-10-10T14:28:16.547618",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.521638",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's import titanic dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "pleasant-blowing",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-10T14:28:16.604903Z",
     "iopub.status.busy": "2021-10-10T14:28:16.603973Z",
     "iopub.status.idle": "2021-10-10T14:28:16.652733Z",
     "shell.execute_reply": "2021-10-10T14:28:16.652186Z",
     "shell.execute_reply.started": "2021-10-10T14:13:08.973643Z"
    },
    "papermill": {
     "duration": 0.077542,
     "end_time": "2021-10-10T14:28:16.652881",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.575339",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('../input/titanic/train.csv') # reading data into dataframe\n",
    "df.head() # displaying first five values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "individual-banana",
   "metadata": {
    "papermill": {
     "duration": 0.024276,
     "end_time": "2021-10-10T14:28:16.702556",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.678280",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Dropping a few features to make it easier to analyze the data using pivot_table function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "metric-presentation",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-10T14:28:16.771974Z",
     "iopub.status.busy": "2021-10-10T14:28:16.760253Z",
     "iopub.status.idle": "2021-10-10T14:28:16.776335Z",
     "shell.execute_reply": "2021-10-10T14:28:16.775773Z",
     "shell.execute_reply.started": "2021-10-10T14:13:09.035306Z"
    },
    "papermill": {
     "duration": 0.048585,
     "end_time": "2021-10-10T14:28:16.776489",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.727904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Cabin Embarked\n",
       "0         0       3    male  22.0      1      0   7.2500   NaN        S\n",
       "1         1       1  female  38.0      1      0  71.2833   C85        C\n",
       "2         1       3  female  26.0      0      0   7.9250   NaN        S\n",
       "3         1       1  female  35.0      1      0  53.1000  C123        S\n",
       "4         0       3    male  35.0      0      0   8.0500   NaN        S"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop(['PassengerId','Ticket','Name'],axis=1,inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "north-sharp",
   "metadata": {
    "papermill": {
     "duration": 0.025579,
     "end_time": "2021-10-10T14:28:16.827577",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.801998",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2. Building a Pivot Table using Pandas"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "photographic-peninsula",
   "metadata": {
    "papermill": {
     "duration": 0.024742,
     "end_time": "2021-10-10T14:28:16.878892",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.854150",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2.1 Group data using index in a pivot table"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "loose-attachment",
   "metadata": {
    "papermill": {
     "duration": 0.024846,
     "end_time": "2021-10-10T14:28:16.929016",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.904170",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- **A single index**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "christian-technique",
   "metadata": {
    "papermill": {
     "duration": 0.024917,
     "end_time": "2021-10-10T14:28:16.979065",
     "exception": false,
     "start_time": "2021-10-10T14:28:16.954148",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Using the ‘Sex’ column as the index for now:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "stable-saskatchewan",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-10T14:28:17.042386Z",
     "iopub.status.busy": "2021-10-10T14:28:17.039853Z",
     "iopub.status.idle": "2021-10-10T14:28:17.080549Z",
     "shell.execute_reply": "2021-10-10T14:28:17.079948Z",
     "shell.execute_reply.started": "2021-10-10T14:13:09.056831Z"
    },
    "papermill": {
     "duration": 0.075399,
     "end_time": "2021-10-10T14:28:17.080748",
     "exception": false,
     "start_time": "2021-10-10T14:28:17.005349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>female</th>\n",
       "      <td>27.915709</td>\n",
       "      <td>44.479818</td>\n",
       "      <td>0.649682</td>\n",
       "      <td>2.159236</td>\n",
       "      <td>0.694268</td>\n",
       "      <td>0.742038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <td>30.726645</td>\n",
       "      <td>25.523893</td>\n",
       "      <td>0.235702</td>\n",
       "      <td>2.389948</td>\n",
       "      <td>0.429809</td>\n",
       "      <td>0.188908</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Age       Fare     Parch    Pclass     SibSp  Survived\n",
       "Sex                                                                 \n",
       "female  27.915709  44.479818  0.649682  2.159236  0.694268  0.742038\n",
       "male    30.726645  25.523893  0.235702  2.389948  0.429809  0.188908"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table1 = pd.pivot_table(data=df,index=['Sex'])\n",
    "table1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "scheduled-capitol",
   "metadata": {
    "papermill": {
     "duration": 0.02608,
     "end_time": "2021-10-10T14:28:17.133395",
     "exception": false,
     "start_time": "2021-10-10T14:28:17.107315",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The values in each cell is the mean value of respective category.<br>For example, 27.915709 is the mean age of females."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "experimental-glory",
   "metadata": {
    "papermill": {
     "duration": 0.025543,
     "end_time": "2021-10-10T14:28:17.184760",
     "exception": false,
     "start_time": "2021-10-10T14:28:17.159217",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can instantly compare all the feature values for both the genders.<br> Visualizing the findings:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "generic-house",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-10T14:28:17.241482Z",
     "iopub.status.busy": "2021-10-10T14:28:17.240815Z",
     "iopub.status.idle": "2021-10-10T14:28:17.493390Z",
     "shell.execute_reply": "2021-10-10T14:28:17.492690Z",
     "shell.execute_reply.started": "2021-10-10T14:13:09.106261Z"
    },
    "papermill": {
     "duration": 0.282643,
     "end_time": "2021-10-10T14:28:17.493541",
     "exception": false,
     "start_time": "2021-10-10T14:28:17.210898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Sex'>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "table1.plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "downtown-spine",
   "metadata": {
    "papermill": {
     "duration": 0.026379,
     "end_time": "2021-10-10T14:28:17.547778",
     "exception": false,
     "start_time": "2021-10-10T14:28:17.521399",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- **Multiple index index**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "educational-supplier",
   "metadata": {
    "papermill": {
     "duration": 0.026492,
     "end_time": "2021-10-10T14:28:17.602812",
     "exception": false,
     "start_time": "2021-10-10T14:28:17.576320",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "You can even use more than one feature as an index to group your data. This increases the level of granularity in the resultant table and you can get more specific with your findings:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "sitting-character",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-10T14:28:17.659421Z",
     "iopub.status.busy": "2021-10-10T14:28:17.658634Z",
     "iopub.status.idle": "2021-10-10T14:28:17.688700Z",
     "shell.execute_reply": "2021-10-10T14:28:17.687958Z",
     "shell.execute_reply.started": "2021-10-10T14:13:09.361674Z"
    },
    "papermill": {
     "duration": 0.059346,
     "end_time": "2021-10-10T14:28:17.688874",
     "exception": false,
     "start_time": "2021-10-10T14:28:17.629528",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Parch</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">female</th>\n",
       "      <th>1</th>\n",
       "      <td>34.611765</td>\n",
       "      <td>106.125798</td>\n",
       "      <td>0.457447</td>\n",
       "      <td>0.553191</td>\n",
       "      <td>0.968085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28.722973</td>\n",
       "      <td>21.970121</td>\n",
       "      <td>0.605263</td>\n",
       "      <td>0.486842</td>\n",
       "      <td>0.921053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21.750000</td>\n",
       "      <td>16.118810</td>\n",
       "      <td>0.798611</td>\n",
       "      <td>0.895833</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">male</th>\n",
       "      <th>1</th>\n",
       "      <td>41.281386</td>\n",
       "      <td>67.226127</td>\n",
       "      <td>0.278689</td>\n",
       "      <td>0.311475</td>\n",
       "      <td>0.368852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30.740707</td>\n",
       "      <td>19.741782</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.342593</td>\n",
       "      <td>0.157407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26.507589</td>\n",
       "      <td>12.661633</td>\n",
       "      <td>0.224784</td>\n",
       "      <td>0.498559</td>\n",
       "      <td>0.135447</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Age        Fare     Parch     SibSp  Survived\n",
       "Sex    Pclass                                                     \n",
       "female 1       34.611765  106.125798  0.457447  0.553191  0.968085\n",
       "       2       28.722973   21.970121  0.605263  0.486842  0.921053\n",
       "       3       21.750000   16.118810  0.798611  0.895833  0.500000\n",
       "male   1       41.281386   67.226127  0.278689  0.311475  0.368852\n",
       "       2       30.740707   19.741782  0.222222  0.342593  0.157407\n",
       "       3       26.507589   12.661633  0.224784  0.498559  0.135447"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# multiple indexes\n",
    "\n",
    "table2 = pd.pivot_table(df,index=['Sex','Pclass'])\n",
    "table2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "median-chaos",
   "metadata": {
    "papermill": {
     "duration": 0.027628,
     "end_time": "2021-10-10T14:28:17.745113",
     "exception": false,
     "start_time": "2021-10-10T14:28:17.717485",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Using multiple indexes on the dataset enables us to concur that the disparity in ticket fare for female and male passengers was valid across every Pclass on Titanic."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "danish-basics",
   "metadata": {
    "papermill": {
     "duration": 0.027065,
     "end_time": "2021-10-10T14:28:17.799222",
     "exception": false,
     "start_time": "2021-10-10T14:28:17.772157",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2.2 Different aggregation function for different features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "selective-screening",
   "metadata": {
    "papermill": {
     "duration": 0.027169,
     "end_time": "2021-10-10T14:28:17.854461",
     "exception": false,
     "start_time": "2021-10-10T14:28:17.827292",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Using multiple indexes on the dataset enables us to concur that the disparity in ticket fare for female and male passengers was valid across every Pclass on Titanic."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "inner-trigger",
   "metadata": {
    "papermill": {
     "duration": 0.026798,
     "end_time": "2021-10-10T14:28:17.908408",
     "exception": false,
     "start_time": "2021-10-10T14:28:17.881610",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Using np.mean() for the ‘Age’ feature and np.sum() for the ‘Survived’ feature;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "banned-funeral",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-10T14:28:17.970870Z",
     "iopub.status.busy": "2021-10-10T14:28:17.970157Z",
     "iopub.status.idle": "2021-10-10T14:28:17.988940Z",
     "shell.execute_reply": "2021-10-10T14:28:17.989507Z",
     "shell.execute_reply.started": "2021-10-10T14:13:09.396254Z"
    },
    "papermill": {
     "duration": 0.054097,
     "end_time": "2021-10-10T14:28:17.989679",
     "exception": false,
     "start_time": "2021-10-10T14:28:17.935582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">female</th>\n",
       "      <th>1</th>\n",
       "      <td>34.611765</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28.722973</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21.750000</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">male</th>\n",
       "      <th>1</th>\n",
       "      <td>41.281386</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30.740707</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26.507589</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Age  Survived\n",
       "Sex    Pclass                     \n",
       "female 1       34.611765        91\n",
       "       2       28.722973        70\n",
       "       3       21.750000        72\n",
       "male   1       41.281386        45\n",
       "       2       30.740707        17\n",
       "       3       26.507589        47"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# different aggregate functions\n",
    "\n",
    "table3 = pd.pivot_table(df,index=['Sex','Pclass'],\n",
    "                        aggfunc={'Age':np.mean,'Survived':np.sum})\n",
    "table3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "metropolitan-twins",
   "metadata": {
    "papermill": {
     "duration": 0.028409,
     "end_time": "2021-10-10T14:28:18.046276",
     "exception": false,
     "start_time": "2021-10-10T14:28:18.017867",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2.3 Aggregate on specific features with values parameter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adopted-season",
   "metadata": {
    "papermill": {
     "duration": 0.027428,
     "end_time": "2021-10-10T14:28:18.101505",
     "exception": false,
     "start_time": "2021-10-10T14:28:18.074077",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "values parameter is where you tell the function which features to aggregate on. It is an optional field and if you don’t specify this value, then the function will aggregate on all the numerical features of the dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "warming-family",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-10T14:28:18.160752Z",
     "iopub.status.busy": "2021-10-10T14:28:18.160089Z",
     "iopub.status.idle": "2021-10-10T14:28:18.179520Z",
     "shell.execute_reply": "2021-10-10T14:28:18.178893Z",
     "shell.execute_reply.started": "2021-10-10T14:13:09.423657Z"
    },
    "papermill": {
     "duration": 0.050145,
     "end_time": "2021-10-10T14:28:18.179662",
     "exception": false,
     "start_time": "2021-10-10T14:28:18.129517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">female</th>\n",
       "      <th>1</th>\n",
       "      <td>0.968085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.921053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">male</th>\n",
       "      <th>1</th>\n",
       "      <td>0.368852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.157407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.135447</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Survived\n",
       "Sex    Pclass          \n",
       "female 1       0.968085\n",
       "       2       0.921053\n",
       "       3       0.500000\n",
       "male   1       0.368852\n",
       "       2       0.157407\n",
       "       3       0.135447"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table4 = pd.pivot_table(df,index=['Sex','Pclass'],\n",
    "                        values=['Survived'],\n",
    "                        aggfunc=np.mean)\n",
    "table4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "uniform-manufacturer",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-10T14:28:18.239754Z",
     "iopub.status.busy": "2021-10-10T14:28:18.239121Z",
     "iopub.status.idle": "2021-10-10T14:28:18.415058Z",
     "shell.execute_reply": "2021-10-10T14:28:18.415571Z",
     "shell.execute_reply.started": "2021-10-10T14:13:09.459636Z"
    },
    "papermill": {
     "duration": 0.207702,
     "end_time": "2021-10-10T14:28:18.415761",
     "exception": false,
     "start_time": "2021-10-10T14:28:18.208059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "table4.plot(kind='bar');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "certified-michigan",
   "metadata": {
    "papermill": {
     "duration": 0.029667,
     "end_time": "2021-10-10T14:28:18.474854",
     "exception": false,
     "start_time": "2021-10-10T14:28:18.445187",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Findings: The survival rate of passengers aboard the Titanic decreased with a degrading Pclass among both the genders. Moreover, the survival rate of male passengers was lower than the female passengers in any given Pclass."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "structured-lighting",
   "metadata": {
    "papermill": {
     "duration": 0.029525,
     "end_time": "2021-10-10T14:28:18.533304",
     "exception": false,
     "start_time": "2021-10-10T14:28:18.503779",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2.4 Find the relationship between features with columns parameter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "focused-fields",
   "metadata": {
    "papermill": {
     "duration": 0.030615,
     "end_time": "2021-10-10T14:28:18.592760",
     "exception": false,
     "start_time": "2021-10-10T14:28:18.562145",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "*columns* parameter is optional and displays the values horizontally on the top of the resultant table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "sensitive-sheep",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-10T14:28:18.654603Z",
     "iopub.status.busy": "2021-10-10T14:28:18.653701Z",
     "iopub.status.idle": "2021-10-10T14:28:18.678450Z",
     "shell.execute_reply": "2021-10-10T14:28:18.678963Z",
     "shell.execute_reply.started": "2021-10-10T14:13:09.642963Z"
    },
    "papermill": {
     "duration": 0.057061,
     "end_time": "2021-10-10T14:28:18.679135",
     "exception": false,
     "start_time": "2021-10-10T14:28:18.622074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>female</th>\n",
       "      <td>91</td>\n",
       "      <td>70</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <td>45</td>\n",
       "      <td>17</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Survived        \n",
       "Pclass        1   2   3\n",
       "Sex                    \n",
       "female       91  70  72\n",
       "male         45  17  47"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#columns\n",
    "\n",
    "table5 = pd.pivot_table(df,index=['Sex'],\n",
    "                        columns=['Pclass'],\n",
    "                        values=['Survived'],\n",
    "                        aggfunc=np.sum)\n",
    "table5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "successful-multiple",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-10T14:28:18.741709Z",
     "iopub.status.busy": "2021-10-10T14:28:18.741004Z",
     "iopub.status.idle": "2021-10-10T14:28:18.915873Z",
     "shell.execute_reply": "2021-10-10T14:28:18.916423Z",
     "shell.execute_reply.started": "2021-10-10T14:13:09.674966Z"
    },
    "papermill": {
     "duration": 0.20777,
     "end_time": "2021-10-10T14:28:18.916599",
     "exception": false,
     "start_time": "2021-10-10T14:28:18.708829",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "table5.plot(kind='bar');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "manual-jacket",
   "metadata": {
    "papermill": {
     "duration": 0.030162,
     "end_time": "2021-10-10T14:28:18.977388",
     "exception": false,
     "start_time": "2021-10-10T14:28:18.947226",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2.5 Handling missing data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "casual-suicide",
   "metadata": {
    "papermill": {
     "duration": 0.030245,
     "end_time": "2021-10-10T14:28:19.038510",
     "exception": false,
     "start_time": "2021-10-10T14:28:19.008265",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "pivot_table even allows you to deal with the missing values through the parameters dropna and fill_value:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "large-equity",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-10T14:28:19.102808Z",
     "iopub.status.busy": "2021-10-10T14:28:19.102153Z",
     "iopub.status.idle": "2021-10-10T14:28:19.131359Z",
     "shell.execute_reply": "2021-10-10T14:28:19.130668Z",
     "shell.execute_reply.started": "2021-10-10T14:13:09.856830Z"
    },
    "papermill": {
     "duration": 0.062276,
     "end_time": "2021-10-10T14:28:19.131504",
     "exception": false,
     "start_time": "2021-10-10T14:28:19.069228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">Age</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Embarked</th>\n",
       "      <th>C</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"6\" valign=\"top\">female</th>\n",
       "      <th rowspan=\"3\" valign=\"top\">0</th>\n",
       "      <th>1</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>36.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20.700000</td>\n",
       "      <td>28.100000</td>\n",
       "      <td>23.688889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">1</th>\n",
       "      <th>1</th>\n",
       "      <td>35.675676</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>33.619048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.142857</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>29.091667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.045455</td>\n",
       "      <td>17.600000</td>\n",
       "      <td>22.548387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"6\" valign=\"top\">male</th>\n",
       "      <th rowspan=\"3\" valign=\"top\">0</th>\n",
       "      <th>1</th>\n",
       "      <td>43.050000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>45.362500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>29.500000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>33.414474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>27.555556</td>\n",
       "      <td>28.076923</td>\n",
       "      <td>27.168478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">1</th>\n",
       "      <th>1</th>\n",
       "      <td>36.437500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>36.121667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17.095000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18.488571</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>22.933333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              Age                      \n",
       "Embarked                        C          Q          S\n",
       "Sex    Survived Pclass                                 \n",
       "female 0        1       50.000000        NaN  13.500000\n",
       "                2             NaN        NaN  36.000000\n",
       "                3       20.700000  28.100000  23.688889\n",
       "       1        1       35.675676  33.000000  33.619048\n",
       "                2       19.142857  30.000000  29.091667\n",
       "                3       11.045455  17.600000  22.548387\n",
       "male   0        1       43.050000  44.000000  45.362500\n",
       "                2       29.500000  57.000000  33.414474\n",
       "                3       27.555556  28.076923  27.168478\n",
       "       1        1       36.437500        NaN  36.121667\n",
       "                2        1.000000        NaN  17.095000\n",
       "                3       18.488571  29.000000  22.933333"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# display null values\n",
    "\n",
    "table6 = pd.pivot_table(df,index=['Sex','Survived','Pclass'],\n",
    "                        columns=['Embarked'],\n",
    "                        values=['Age'],\n",
    "                        aggfunc=np.mean)\n",
    "table6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "worldwide-duncan",
   "metadata": {
    "papermill": {
     "duration": 0.030846,
     "end_time": "2021-10-10T14:28:19.194186",
     "exception": false,
     "start_time": "2021-10-10T14:28:19.163340",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Replacing the NaN values with the mean value from the ‘Age’ column:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "invisible-daniel",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-10T14:28:19.267299Z",
     "iopub.status.busy": "2021-10-10T14:28:19.266220Z",
     "iopub.status.idle": "2021-10-10T14:28:19.290992Z",
     "shell.execute_reply": "2021-10-10T14:28:19.291513Z",
     "shell.execute_reply.started": "2021-10-10T14:13:09.889755Z"
    },
    "papermill": {
     "duration": 0.066381,
     "end_time": "2021-10-10T14:28:19.291700",
     "exception": false,
     "start_time": "2021-10-10T14:28:19.225319",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">Age</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Embarked</th>\n",
       "      <th>C</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"6\" valign=\"top\">female</th>\n",
       "      <th rowspan=\"3\" valign=\"top\">0</th>\n",
       "      <th>1</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>13.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>29.699118</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>36.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20.700000</td>\n",
       "      <td>28.100000</td>\n",
       "      <td>23.688889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">1</th>\n",
       "      <th>1</th>\n",
       "      <td>35.675676</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>33.619048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.142857</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>29.091667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.045455</td>\n",
       "      <td>17.600000</td>\n",
       "      <td>22.548387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"6\" valign=\"top\">male</th>\n",
       "      <th rowspan=\"3\" valign=\"top\">0</th>\n",
       "      <th>1</th>\n",
       "      <td>43.050000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>45.362500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>29.500000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>33.414474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>27.555556</td>\n",
       "      <td>28.076923</td>\n",
       "      <td>27.168478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">1</th>\n",
       "      <th>1</th>\n",
       "      <td>36.437500</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>36.121667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>17.095000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18.488571</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>22.933333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              Age                      \n",
       "Embarked                        C          Q          S\n",
       "Sex    Survived Pclass                                 \n",
       "female 0        1       50.000000  29.699118  13.500000\n",
       "                2       29.699118  29.699118  36.000000\n",
       "                3       20.700000  28.100000  23.688889\n",
       "       1        1       35.675676  33.000000  33.619048\n",
       "                2       19.142857  30.000000  29.091667\n",
       "                3       11.045455  17.600000  22.548387\n",
       "male   0        1       43.050000  44.000000  45.362500\n",
       "                2       29.500000  57.000000  33.414474\n",
       "                3       27.555556  28.076923  27.168478\n",
       "       1        1       36.437500  29.699118  36.121667\n",
       "                2        1.000000  29.699118  17.095000\n",
       "                3       18.488571  29.000000  22.933333"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#handling null values\n",
    "\n",
    "table7 = pd.pivot_table(df,index=['Sex','Survived','Pclass'],\n",
    "                        columns=['Embarked'],\n",
    "                        values=['Age'],\n",
    "                        aggfunc=np.mean,\n",
    "                        fill_value=np.mean(df['Age']))\n",
    "table7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "processed-nickel",
   "metadata": {
    "papermill": {
     "duration": 0.031503,
     "end_time": "2021-10-10T14:28:19.355963",
     "exception": false,
     "start_time": "2021-10-10T14:28:19.324460",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This is just an introduction in using pivot table for data analysis.<br> Feel free to upvote if you find this notebook useful.<p> THANK YOU"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12.662385,
   "end_time": "2021-10-10T14:28:20.099288",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-10-10T14:28:07.436903",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
